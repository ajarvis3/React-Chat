[{"E:\\OneDrive\\Documents\\Programming\\React\\chat\\client\\src\\index.js":"1","E:\\OneDrive\\Documents\\Programming\\React\\chat\\client\\src\\Chat.js":"2","E:\\OneDrive\\Documents\\Programming\\React\\chat\\client\\src\\MySignalR.js":"3","E:\\OneDrive\\Documents\\Programming\\React\\chat\\client\\src\\App.js":"4","E:\\OneDrive\\Documents\\Programming\\React\\chat\\client\\src\\reportWebVitals.js":"5"},{"size":500,"mtime":1607619367873,"results":"6","hashOfConfig":"7"},{"size":3312,"mtime":1610048141866,"results":"8","hashOfConfig":"7"},{"size":592,"mtime":1610042579637,"results":"9","hashOfConfig":"7"},{"size":681,"mtime":1610042690605,"results":"10","hashOfConfig":"7"},{"size":362,"mtime":1607619367873,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"b5onzs",{"filePath":"14","messages":"15","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"E:\\OneDrive\\Documents\\Programming\\React\\chat\\client\\src\\index.js",[],"E:\\OneDrive\\Documents\\Programming\\React\\chat\\client\\src\\Chat.js",["23"],"import \"./Chat.css\";\r\nimport React, {useState, useEffect, useCallback} from 'react';\r\n\r\n/**\r\n * Represents a single message\r\n * @param {*} props \r\n */\r\nfunction Message(props)\r\n{\r\n    return (\r\n        <div className=\"message\">\r\n            <div className=\"user-tag\">\r\n                User: {props.user}\r\n            </div>\r\n            <div className=\"message-text\">\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n        );\r\n}\r\n\r\n/**\r\n * Used for sending a message\r\n * @param {*} props \r\n */\r\nfunction SendMessage(props)\r\n{\r\n    const [message, setMessage] = useState(\"\");\r\n    function sendMessage()\r\n    {\r\n        props.connection.send('SendMessage', 'this user', message, props.group);\r\n    }\r\n\r\n    function handleChange(event) {\r\n        setMessage(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"new-message\">\r\n            <textarea value={message} onChange={handleChange} />\r\n            <button onClick={sendMessage} disabled={!props.connected}>Send Message</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * Components to make a connection\r\n * @param {*} props \r\n */\r\nfunction Connect(props)\r\n{\r\n    console.log('rerender', props.messages);\r\n\r\n    // TODO add user\r\n    const handleButton = () => {\r\n        if (props.connected)\r\n        {\r\n            console.log('here?');\r\n            props.connection.send(\"SubscribeToChat\", props.value);    \r\n        }\r\n    }\r\n\r\n    function handleChange(event)\r\n    {\r\n        if (props.connected)\r\n        {\r\n            props.setValue(event.target.value);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"group-connection\">\r\n            <textarea value={props.value} onChange={handleChange} />\r\n            <button onClick={handleButton} disabled={!props.connected}>Join Group</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * Represents a single chat group\r\n * @param {*} props \r\n */\r\nfunction Chat(props)\r\n{\r\n    const [messages, setMessages] = useState([]);\r\n    const [group, setGroup] = useState(\"\");\r\n    console.log(\"top\", messages);\r\n\r\n\r\n    const receiveMessage = useCallback((user, message, id) => {\r\n            console.log(id, messages);\r\n            const newMessages = messages.slice();\r\n            newMessages.push({user: user, message: message, id: id});\r\n            console.log(newMessages);\r\n            setMessages(newMessages);\r\n            console.log(messages, newMessages);\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (props.connected) {\r\n            props.connection.on(`ReceiveMessage${group}`, receiveMessage);\r\n        }\r\n    });\r\n\r\n    const messageComponents = messages.map((value) => {\r\n        return (\r\n            <Message key={value.id} user={value.user} message={value.message} />\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className=\"chat-group\">\r\n            <Connect \r\n                value={group} \r\n                setValue={setGroup}\r\n                connected={props.connected} \r\n                connection={props.connection}\r\n                messages={messages}\r\n                setMessages={setMessages}\r\n                receiveMessage={receiveMessage}\r\n                />\r\n            <SendMessage connection={props.connection} connected={props.connected} group={group} />\r\n            {messageComponents}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;\r\n","E:\\OneDrive\\Documents\\Programming\\React\\chat\\client\\src\\MySignalR.js",[],"E:\\OneDrive\\Documents\\Programming\\React\\chat\\client\\src\\App.js",["24"],"E:\\OneDrive\\Documents\\Programming\\React\\chat\\client\\src\\reportWebVitals.js",[],{"ruleId":"25","severity":1,"message":"26","line":90,"column":28,"nodeType":"27","endLine":90,"endColumn":39},{"ruleId":"28","severity":1,"message":"29","line":1,"column":8,"nodeType":"27","messageId":"30","endLine":1,"endColumn":12},"react-hooks/exhaustive-deps","React Hook useCallback does nothing when called with only one argument. Did you forget to pass an array of dependencies?","Identifier","no-unused-vars","'logo' is defined but never used.","unusedVar"]