{"version":3,"sources":["Chat.js","App.js","reportWebVitals.js","index.js"],"names":["Message","props","className","user","message","SendMessage","useState","setMessage","name","setName","value","onChange","event","target","placeholder","onClick","connection","send","group","Delete","delete","Chat","messages","setMessages","receiveMessage","id","newMessages","slice","push","useEffect","on","off","messageComponents","map","chats","connections","AddGroup","setGroup","setChats","handleButton","useCallback","newChats","App","setConnection","connected","setConnected","deleteChat","index","findIndex","elem","splice","url","signalR","withUrl","configureLogging","Information","build","start","connect","chatElems","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.16ccca4d.chunk.js","sourcesContent":["import \"./Chat.css\";\r\nimport React, {useState, useEffect} from 'react';\r\n\r\n/**\r\n * Represents a single message\r\n * @param {*} props \r\n */\r\nfunction Message(props)\r\n{\r\n    return (\r\n        <div className=\"message style-text-box\">\r\n            <div className=\"user-tag\">\r\n                User: {props.user}\r\n            </div>\r\n            <div className=\"message-text\">\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n        );\r\n}\r\n\r\n/**\r\n * Used for sending a message\r\n * @param {*} props \r\n */\r\nfunction SendMessage(props)\r\n{\r\n    const [message, setMessage] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    function sendMessage()\r\n    {\r\n        props.connection.send('SendMessage', name, message, props.group);\r\n        setMessage(\"\");\r\n    }\r\n\r\n    function handleChange(event) {\r\n        setMessage(event.target.value);\r\n    }\r\n\r\n    function handleName(event) {\r\n        setName(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"new-message\">\r\n            New Message:\r\n            <textarea \r\n                className=\"style-ta style-text-box\" \r\n                value={name} \r\n                onChange={handleName} \r\n                placeholder=\"Name\" />\r\n            <textarea \r\n                className=\"style-ta style-text-box\" \r\n                value={message} \r\n                onChange={handleChange} \r\n                placeholder=\"Message\" />\r\n            <button onClick={sendMessage} className=\"style-button\">\r\n                Send Message\r\n            </button>\r\n     </div>\r\n    )\r\n}\r\n\r\n/**\r\n * Delete button for this chat\r\n * @param {*} props \r\n */\r\nfunction Delete(props) \r\n{\r\n    return (\r\n        <div className=\"delete-area\">\r\n            <button className=\"style-button\" onClick={props.delete}>\r\n                Remove\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * Represents a single chat group\r\n * @param {*} props \r\n */\r\nfunction Chat(props)\r\n{\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    // Sets up signalr callback\r\n    const receiveMessage = (user, message, id) => {\r\n        const newMessages = messages.slice();\r\n        newMessages.push({user: user, message: message, id: id});\r\n        setMessages(newMessages);\r\n    };    \r\n\r\n    // Sets up receiving message\r\n    useEffect(() => {\r\n        props.connection.on(`ReceiveMessage${props.group}`, receiveMessage);\r\n\r\n        // prevent multiple calls to event handler\r\n        return function cleanup() {\r\n            props.connection.off(`ReceiveMessage${props.group}`, receiveMessage);\r\n        }\r\n    }, [props.group, messages, props.connection, receiveMessage]);\r\n\r\n    const messageComponents = messages.map((value) => {\r\n        return (\r\n            <Message key={value.id} user={value.user} message={value.message} />\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className=\"chat-group\">\r\n            {props.group}\r\n            <Delete \r\n                group={props.group} \r\n                delete={() => props.delete(props.group, props.chats)} />\r\n            <SendMessage connection={props.connection} group={props.group} />\r\n            {messageComponents}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;\r\n","import './App.css';\n// import connect from './MySignalR.js';\nimport Chat from \"./Chat.js\";\nimport React, {useState, useEffect, useCallback} from 'react';\nimport * as signalR from \"@microsoft/signalr\";\n\nconst connections = {};\n\nfunction connect(url, setConnected) {\n    if (connections[url]) {\n        return connections[url];\n    }\n    const connection = new signalR.HubConnectionBuilder()\n                            .withUrl(url)\n                            .configureLogging(signalR.LogLevel.Information)\n                            .build();\n    connection.start();\n    connection.on('OnConnected', () => {\n        setConnected(true);\n    });  \n    connections[url] = connection;\n    return connection;\n}\n\n/**\n * Contains logic for adding a group\n * @param {*} props \n */\nfunction AddGroup(props) \n{\n  const [group, setGroup] = useState(\"\");\n  const {chats, connection, setChats} = props;\n\n  const handleButton = useCallback(() => {\n    connection.send(\"SubscribeToChat\", group);   \n    const newChats = chats.slice();\n    newChats.push(group);\n    setChats(newChats);\n    setGroup(\"\");    \n  }, [chats, group, connection, setChats]);\n\n  const handleChange = (event) => {\n      setGroup(event.target.value);\n  };\n\n  return (\n    <div className=\"add-group\">\n            <textarea \n                className=\"style-ta style-text-box\" \n                value={group} \n                onChange={handleChange} \n                placeholder=\"Group Name\"/>\n            <button onClick={handleButton} className=\"style-button\">\n                Join Group\n            </button>\n    </div>\n  );\n\n}\n\n/**\n * Top-level component\n */\nfunction App() \n{\n  const [connection, setConnection] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [chats, setChats] = useState([]);\n\n  const deleteChat = useCallback((name, chats) => {\n    const index = chats.findIndex((elem) => {\n      return elem === name;\n    });\n    const newChats = chats.slice(); \n    newChats.splice(index, 1);\n    setChats(newChats);\n    connection.send(\"UnsubscribeChat\", name);\n}, [connection]);\n\n  useEffect(() => {\n    const baseUrl = \"https://signalr-react-chatapp.azurewebsites.net\";\n    const url = `${baseUrl}/chathub`;\n    setConnection(connect(url, setConnected));\n  }, []);\n\n  const chatElems = chats.map((value) => {\n    return (<Chat \n    key={value}\n    connection={connection}\n    group={value} \n    delete={deleteChat} \n    chats={chats} />);\n  });\n\n  return (\n    <div className=\"app\">\n      {connected ? \n        <AddGroup \n          chats={chats} \n          setChats={setChats}\n          connection={connection} \n          deleteChat={deleteChat} />\n          : \"Not Connected\"}\n      <div className=\"chats\">\n        {chatElems}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}