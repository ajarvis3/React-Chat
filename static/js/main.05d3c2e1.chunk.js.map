{"version":3,"sources":["MySignalR.js","Chat.js","App.js","reportWebVitals.js","index.js"],"names":["connections","connect","url","connection","signalR","withUrl","configureLogging","Information","build","start","Message","props","className","user","message","SendMessage","useState","setMessage","name","setName","value","onChange","event","target","placeholder","onClick","send","group","disabled","connected","Delete","delete","Chat","messages","setMessages","receiveMessage","id","newMessages","slice","push","useEffect","on","off","messageComponents","map","AddGroup","setGroup","handleChange","useCallback","newChats","chats","index","findIndex","elem","key","splice","setChats","deleteChat","App","setConnected","setConnection","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.05d3c2e1.chunk.js","sourcesContent":["/**\r\n * A file used to set up SignalR connection\r\n */\r\n\r\nimport * as signalR from \"@microsoft/signalr\";\r\n\r\nconst connections = {};\r\n\r\nfunction connect(url) {\r\n    if (connections[url]) {\r\n        return connections[url];\r\n    }\r\n    const connection = new signalR.HubConnectionBuilder()\r\n                            .withUrl(url)\r\n                            .configureLogging(signalR.LogLevel.Information)\r\n                            .build();\r\n    connection.start();\r\n    connections[url] = connection;\r\n    return connection;\r\n}\r\n\r\nexport default connect;\r\n","import \"./Chat.css\";\r\nimport React, {useState, useEffect} from 'react';\r\n\r\n/**\r\n * Represents a single message\r\n * @param {*} props \r\n */\r\nfunction Message(props)\r\n{\r\n    return (\r\n        <div className=\"message style-text-box\">\r\n            <div className=\"user-tag\">\r\n                User: {props.user}\r\n            </div>\r\n            <div className=\"message-text\">\r\n                {props.message}\r\n            </div>\r\n        </div>\r\n        );\r\n}\r\n\r\n/**\r\n * Used for sending a message\r\n * @param {*} props \r\n */\r\nfunction SendMessage(props)\r\n{\r\n    const [message, setMessage] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n\r\n    function sendMessage()\r\n    {\r\n        props.connection.send('SendMessage', name, message, props.group);\r\n        setMessage(\"\");\r\n    }\r\n\r\n    function handleChange(event) {\r\n        setMessage(event.target.value);\r\n    }\r\n\r\n    function handleName(event) {\r\n        setName(event.target.value);\r\n    }\r\n\r\n    return (\r\n        <div className=\"new-message\">\r\n            New Message:\r\n            <textarea \r\n                className=\"style-ta style-text-box\" \r\n                value={name} \r\n                onChange={handleName} \r\n                placeholder=\"Name\" />\r\n            <textarea \r\n                className=\"style-ta style-text-box\" \r\n                value={message} \r\n                onChange={handleChange} \r\n                placeholder=\"Message\" />\r\n            <button onClick={sendMessage} disabled={!props.connected} className=\"style-button\">\r\n                Send Message\r\n            </button>\r\n     </div>\r\n    )\r\n}\r\n\r\n/**\r\n * Delete button for this chat\r\n * @param {*} props \r\n */\r\nfunction Delete(props) \r\n{\r\n    return (\r\n        <div className=\"delete-area\">\r\n            <button className=\"style-button\" onClick={props.delete}>\r\n                Remove\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\n/**\r\n * Represents a single chat group\r\n * @param {*} props \r\n */\r\nfunction Chat(props)\r\n{\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    // Sets up signalr callback\r\n    const receiveMessage = (user, message, id) => {\r\n        const newMessages = messages.slice();\r\n        newMessages.push({user: user, message: message, id: id});\r\n        setMessages(newMessages);\r\n    };    \r\n\r\n    // Sets up receiving message\r\n    useEffect(() => {\r\n        if (props.connected) {\r\n            props.connection.on(`ReceiveMessage${props.group}`, receiveMessage);\r\n        }\r\n\r\n        // prevent multiple calls to event handler\r\n        return function cleanup() {\r\n            props.connection.off(`ReceiveMessage${props.group}`, receiveMessage);\r\n        }\r\n    }, [props.group, messages, props.connected, props.connection, receiveMessage]);\r\n\r\n    const messageComponents = messages.map((value) => {\r\n        return (\r\n            <Message key={value.id} user={value.user} message={value.message} />\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className=\"chat-group\">\r\n            {props.group}\r\n            <Delete \r\n                group={props.group} \r\n                delete={() => props.delete(props.group)} />\r\n            <SendMessage connection={props.connection} connected={props.connected} group={props.group} />\r\n            {messageComponents}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Chat;\r\n","import './App.css';\nimport connect from './MySignalR.js';\nimport Chat from \"./Chat.js\";\nimport React, {useState, useEffect, useCallback} from 'react';\n\n/**\n * Contains logic for adding a group\n * @param {*} props \n */\nfunction AddGroup(props) \n{\n  const [group, setGroup] = useState(\"\");\n\n  function deleteChat(name)\n  {\n    const index = props.chats.findIndex((elem) => {\n      return elem.key === name;\n    });\n    const newChats = props.chats.splice(index, 1);\n    props.setChats(newChats);\n    props.connection.send(\"UnsubscribeChat\", name);\n  }\n\n  const handleButton = () => {\n    if (props.connected)\n    {\n        props.connection.send(\"SubscribeToChat\", group);   \n        const newChats = props.chats.slice();\n        newChats.push(<Chat \n                        key={group}\n                        connected={props.connected}\n                        connection={props.connection}\n                        group={group} \n                        delete={(name) => deleteChat(name)}/>);\n        props.setChats(newChats);\n        setGroup(\"\");    \n    }\n  }\n\n  const handleChange = useCallback((event) => {\n      if (props.connected)\n      {\n          setGroup(event.target.value);\n      }\n  }, [props.connected]);\n\n  return (\n    <div className=\"add-group\">\n            <textarea \n                className=\"style-ta style-text-box\" \n                value={group} \n                onChange={handleChange} \n                placeholder=\"Group Name\"/>\n            <button onClick={handleButton} disabled={!props.connected} className=\"style-button\">\n                Join Group\n            </button>\n    </div>\n  );\n\n}\n\n/**\n * Top-level component\n */\nfunction App() \n{\n  const [connected, setConnected] = useState(false);\n  const [connection, setConnection] = useState(null);\n  const [chats, setChats] = useState([]);\n\n  useEffect(() => {\n    const baseUrl = \"https://signalr-react-chatapp.azurewebsites.net/\";\n    const url = `${baseUrl}/chathub`;\n    setConnection(connect(url));\n    if (connection !== null) {\n      connection.on('OnConnected', () => {\n        setConnected(true);\n      });        \n    }\n  }, [connection])\n\n  return (\n    <div className=\"app\">\n      <AddGroup \n        chats={chats} \n        setChats={setChats}\n        connected={connected}\n        connection={connection} />\n        <div className=\"chats\">\n          {chats}\n        </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}